import twilio from 'twilio';
import dotenv from 'dotenv';

dotenv.config();

const accountSid = process.env.TWILIO_ACCOUNT_SID;
const authToken = process.env.TWILIO_AUTH_TOKEN;
const twilioPhoneNumber = process.env.TWILIO_PHONE_NUMBER;

// ุฅูุดุงุก ุนููู Twilio ุฅุฐุง ูุงูุช ุฌููุน ุงูุจูุงูุงุช ุงููุทููุจุฉ ูุชููุฑุฉ
const client = accountSid && authToken ? twilio(accountSid, authToken) : null;

/**
 * ุฎุฏูุฉ ุฅุฑุณุงู ุฑุณุงุฆู ูุงุชุณุงุจ
 * ูููู ุงุณุชุจุฏุงููุง ุจุฎุฏูุฉ Twilio ูู ุจูุฆุฉ ุงูุฅูุชุงุฌ
 */

/**
 * ุฅุฑุณุงู ุฑูุฒ OTP ุนุจุฑ ูุงุชุณุงุจ
 * @param phoneNumber ุฑูู ุงููุงุชู
 * @param otp ุฑูุฒ ุงูุชุญูู
 * @returns ูุฌุงุญ ุฃู ูุดู ุงูุนูููุฉ
 */
export const sendOTP = async (phoneNumber: string, otp: string): Promise<boolean> => {
  try {
    // ูู ุจูุฆุฉ ุงูุชุทููุฑุ ูููู ููุท ุจุทุจุงุนุฉ ุงูุฑูุฒ ูู ุณุฌู ุงูุชุตุญูุญ
    if (process.env.NODE_ENV === 'development') {
      console.log('๐ฑ [DEV MODE] ุฅุฑุณุงู ุฑูุฒ OTP:');
      console.log(`๐ ุฅูู: ${phoneNumber}`);
      console.log(`๐ข ุงูุฑูุฒ: ${otp}`);
      return true;
    }
    
    // ูู ุจูุฆุฉ ุงูุฅูุชุงุฌุ ุงุณุชุฎุฏู Twilio ุฃู ุฃู ุฎุฏูุฉ ุฃุฎุฑู
    if (
      process.env.TWILIO_ACCOUNT_SID &&
      process.env.TWILIO_AUTH_TOKEN &&
      process.env.TWILIO_PHONE_NUMBER
    ) {
      // ุงุณุชูุฑุงุฏ Twilio ููุท ุนูุฏ ุงูุญุงุฌุฉ
      const twilio = require('twilio');
      const client = twilio(
        process.env.TWILIO_ACCOUNT_SID,
        process.env.TWILIO_AUTH_TOKEN
      );
      
      await client.messages.create({
        body: `ุฑูุฒ ุงูุชุญูู ุงูุฎุงุต ุจู ูู: ${otp}. ูุฐุง ุงูุฑูุฒ ุตุงูุญ ููุฏุฉ 15 ุฏูููุฉ.`,
        from: `whatsapp:${process.env.TWILIO_PHONE_NUMBER}`,
        to: `whatsapp:${phoneNumber}`
      });
      
      return true;
    }
    
    // ุฅุฐุง ูู ุชูู ููุงู ุชููุฆุฉ Twilio
    console.error('โ ูู ูุชู ุชูููู ุฎุฏูุฉ Twilio ุจุดูู ุตุญูุญ');
    return false;
  } catch (error) {
    console.error('โ ุฎุทุฃ ูู ุฅุฑุณุงู ุฑุณุงูุฉ ูุงุชุณุงุจ:', error);
    return false;
  }
};

/**
 * ุฅุฑุณุงู ุฅุดุนุงุฑ ูุทุงุจูุฉ ุนุจุฑ ูุงุชุณุงุจ
 */
export const sendMatchNotification = async (
  phoneNumber: string,
  matchDetails: any
): Promise<boolean> => {
  try {
    // ูู ุจูุฆุฉ ุงูุชุทููุฑุ ูููู ููุท ุจุทุจุงุนุฉ ุงูุฅุดุนุงุฑ ูู ุณุฌู ุงูุชุตุญูุญ
    if (process.env.NODE_ENV === 'development') {
      console.log('๐ฑ [DEV MODE] ุฅุฑุณุงู ุฅุดุนุงุฑ ูุทุงุจูุฉ:');
      console.log(`๐ ุฅูู: ${phoneNumber}`);
      console.log('๐ ุชูุงุตูู ุงููุทุงุจูุฉ:', matchDetails);
      return true;
    }
    
    // ููุทู ูุดุงุจู ููุฅูุชุงุฌ ุจุงุณุชุฎุฏุงู Twilio
    
    return true;
  } catch (error) {
    console.error('โ ุฎุทุฃ ูู ุฅุฑุณุงู ุฅุดุนุงุฑ ูุทุงุจูุฉ:', error);
    return false;
  }
};

export default {
  sendOTP,
  sendMatchNotification
};
